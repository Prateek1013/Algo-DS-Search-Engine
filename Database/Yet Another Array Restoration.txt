C. Yet Another Array Restorationtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputWe have a secret array. You don't know this array and you have to restore it. However, you know some facts about this array:  The array consists of nn distinct positive (greater than 00) integers.  The array contains two elements xx and yy (these elements are known for you) such that x<yx<y.  If you sort the array in increasing order (such that a1<a2<…<ana1<a2<…<an), differences between all adjacent (consecutive) elements are equal (i.e. a2−a1=a3−a2=…=an−an−1)a2−a1=a3−a2=…=an−an−1). It can be proven that such an array always exists under the constraints given below.Among all possible arrays that satisfy the given conditions, we ask you to restore one which has the minimum possible maximum element. In other words, you have to minimize max(a1,a2,…,an)max(a1,a2,…,an).You have to answer tt independent test cases.InputThe first line of the input contains one integer tt (1≤t≤1001≤t≤100) — the number of test cases. Then tt test cases follow.The only line of the test case contains three integers nn, xx and yy (2≤n≤502≤n≤50; 1≤x<y≤501≤x<y≤50) — the length of the array and two elements that are present in the array, respectively.OutputFor each test case, print the answer: nn integers a1,a2,…,ana1,a2,…,an (1≤ai≤1091≤ai≤109), where aiai is the ii-th element of the required array. If there are several answers, you can print any (it also means that the order of elements doesn't matter).It can be proven that such an array always exists under the given constraints.ExampleInputCopy5
2 1 49
5 20 50
6 20 50
5 3 8
9 13 22
OutputCopy1 49 
20 40 30 50 10
26 32 20 38 44 50 
8 23 18 13 3 
1 10 13 4 19 22 25 16 7 
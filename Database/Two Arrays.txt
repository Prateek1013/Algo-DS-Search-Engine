B. Two Arraystime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputRedDreamer has an array aa consisting of nn non-negative integers, and an unlucky integer TT.Let's denote the misfortune of array bb having length mm as f(b)f(b) — the number of pairs of integers (i,j)(i,j) such that 1≤i<j≤m1≤i<j≤m and bi+bj=Tbi+bj=T. RedDreamer has to paint each element of aa into one of two colors, white and black (for each element, the color is chosen independently), and then create two arrays cc and dd so that all white elements belong to cc, and all black elements belong to dd (it is possible that one of these two arrays becomes empty). RedDreamer wants to paint the elements in such a way that f(c)+f(d)f(c)+f(d) is minimum possible.For example:  if n=6n=6, T=7T=7 and a=[1,2,3,4,5,6]a=[1,2,3,4,5,6], it is possible to paint the 11-st, the 44-th and the 55-th elements white, and all other elements black. So c=[1,4,5]c=[1,4,5], d=[2,3,6]d=[2,3,6], and f(c)+f(d)=0+0=0f(c)+f(d)=0+0=0;  if n=3n=3, T=6T=6 and a=[3,3,3]a=[3,3,3], it is possible to paint the 11-st element white, and all other elements black. So c=[3]c=[3], d=[3,3]d=[3,3], and f(c)+f(d)=0+1=1f(c)+f(d)=0+1=1. Help RedDreamer to paint the array optimally!InputThe first line contains one integer tt (1≤t≤10001≤t≤1000) — the number of test cases. Then tt test cases follow.The first line of each test case contains two integers nn and TT (1≤n≤1051≤n≤105, 0≤T≤1090≤T≤109) — the number of elements in the array and the unlucky integer, respectively. The second line contains nn integers a1a1, a2a2, ..., anan (0≤ai≤1090≤ai≤109) — the elements of the array. The sum of nn over all test cases does not exceed 105105.OutputFor each test case print nn integers: p1p1, p2p2, ..., pnpn (each pipi is either 00 or 11) denoting the colors. If pipi is 00, then aiai is white and belongs to the array cc, otherwise it is black and belongs to the array dd.If there are multiple answers that minimize the value of f(c)+f(d)f(c)+f(d), print any of them.ExampleInputCopy2
6 7
1 2 3 4 5 6
3 6
3 3 3
OutputCopy1 0 0 1 1 0 
1 0 0
A. You Are Given Two Binary Strings...time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given two binary strings xx and yy, which are binary representations of some two integers (let's denote these integers as f(x)f(x) and f(y)f(y)). You can choose any integer k≥0k≥0, calculate the expression sk=f(x)+f(y)⋅2ksk=f(x)+f(y)⋅2k and write the binary representation of sksk in reverse order (let's denote it as revkrevk). For example, let x=1010x=1010 and y=11y=11; you've chosen k=1k=1 and, since 21=10221=102, so sk=10102+112⋅102=100002sk=10102+112⋅102=100002 and revk=00001revk=00001.For given xx and yy, you need to choose such kk that revkrevk is lexicographically minimal (read notes if you don't know what does "lexicographically" means).It's guaranteed that, with given constraints, kk exists and is finite.InputThe first line contains a single integer TT (1≤T≤1001≤T≤100) — the number of queries.Next 2T2T lines contain a description of queries: two lines per query. The first line contains one binary string xx, consisting of no more than 105105 characters. Each character is either 0 or 1.The second line contains one binary string yy, consisting of no more than 105105 characters. Each character is either 0 or 1.It's guaranteed, that 1≤f(y)≤f(x)1≤f(y)≤f(x) (where f(x)f(x) is the integer represented by xx, and f(y)f(y) is the integer represented by yy), both representations don't have any leading zeroes, the total length of xx over all queries doesn't exceed 105105, and the total length of yy over all queries doesn't exceed 105105.OutputPrint TT integers (one per query). For each query print such kk that revkrevk is lexicographically minimal.ExampleInputCopy4
1010
11
10001
110
1
1
1010101010101
11110000
OutputCopy1
3
0
0
NoteThe first query was described in the legend.In the second query, it's optimal to choose k=3k=3. The 23=1000223=10002 so s3=100012+1102⋅10002=10001+110000=1000001s3=100012+1102⋅10002=10001+110000=1000001 and rev3=1000001rev3=1000001. For example, if k=0k=0, then s0=10111s0=10111 and rev0=11101rev0=11101, but rev3=1000001rev3=1000001 is lexicographically smaller than rev0=11101rev0=11101.In the third query s0=10s0=10 and rev0=01rev0=01. For example, s2=101s2=101 and rev2=101rev2=101. And 0101 is lexicographically smaller than 101101.The quote from Wikipedia: "To determine which of two strings of characters comes when arranging in lexicographical order, their first letters are compared. If they differ, then the string whose first letter comes earlier in the alphabet comes before the other string. If the first letters are the same, then the second letters are compared, and so on. If a position is reached where one string has no more letters to compare while the other does, then the first (shorter) string is deemed to come first in alphabetical order."
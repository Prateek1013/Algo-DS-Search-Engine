B. Neko Performs Cat Furrier Transformtime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputCat Furrier Transform is a popular algorithm among cat programmers to create longcats. As one of the greatest cat programmers ever exist, Neko wants to utilize this algorithm to create the perfect longcat.Assume that we have a cat with a number xx. A perfect longcat is a cat with a number equal 2m−12m−1 for some non-negative integer mm. For example, the numbers 00, 11, 33, 77, 1515 and so on are suitable for the perfect longcats.In the Cat Furrier Transform, the following operations can be performed on xx:  (Operation A): you select any non-negative integer nn and replace xx with x⊕(2n−1)x⊕(2n−1), with ⊕⊕ being a bitwise XOR operator. (Operation B): replace xx with x+1x+1. The first applied operation must be of type A, the second of type B, the third of type A again, and so on. Formally, if we number operations from one in the order they are executed, then odd-numbered operations must be of type A and the even-numbered operations must be of type B.Neko wants to produce perfect longcats at industrial scale, thus for each cat Neko only wants to perform at most 4040 operations. Can you help Neko writing a transformation plan?Note that it is not required to minimize the number of operations. You just need to use no more than 4040 operations.InputThe only line contains a single integer xx (1≤x≤1061≤x≤106).OutputThe first line should contain a single integer tt (0≤t≤400≤t≤40) — the number of operations to apply.Then for each odd-numbered operation print the corresponding number nini in it. That is, print ⌈t2⌉⌈t2⌉ integers nini (0≤ni≤300≤ni≤30), denoting the replacement xx with x⊕(2ni−1)x⊕(2ni−1) in the corresponding step.If there are multiple possible answers, you can print any of them. It is possible to show, that there is at least one answer in the constraints of this problem.ExamplesInputCopy39
OutputCopy4
5 3 InputCopy1
OutputCopy0
InputCopy7
OutputCopy0
NoteIn the first test, one of the transforms might be as follows: 39→56→57→62→6339→56→57→62→63. Or more precisely: Pick n=5n=5. xx is transformed into 39⊕3139⊕31, or 5656.  Increase xx by 11, changing its value to 5757.  Pick n=3n=3. xx is transformed into 57⊕757⊕7, or 6262.  Increase xx by 11, changing its value to 63=26−163=26−1. In the second and third test, the number already satisfies the goal requirement.
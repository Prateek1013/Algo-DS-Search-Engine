B. Substring Removaltime limit per test1 secondmemory limit per test256 megabytesinputstandard inputoutputstandard outputYou are given a string ss of length nn consisting only of lowercase Latin letters.A substring of a string is a contiguous subsequence of that string. So, string "forces" is substring of string "codeforces", but string "coder" is not.Your task is to calculate the number of ways to remove exactly one substring from this string in such a way that all remaining characters are equal (the number of distinct characters either zero or one).It is guaranteed that there is at least two different characters in ss.Note that you can remove the whole string and it is correct. Also note that you should remove at least one character.Since the answer can be rather large (not very large though) print it modulo 998244353998244353.If you are Python programmer, consider using PyPy instead of Python when you submit your code.InputThe first line of the input contains one integer nn (2≤n≤2⋅1052≤n≤2⋅105) — the length of the string ss.The second line of the input contains the string ss of length nn consisting only of lowercase Latin letters.It is guaranteed that there is at least two different characters in ss.OutputPrint one integer — the number of ways modulo 998244353998244353 to remove exactly one substring from ss in such way that all remaining characters are equal.ExamplesInputCopy4
abaa
OutputCopy6
InputCopy7
aacdeee
OutputCopy6InputCopy2
az
OutputCopy3NoteLet s[l;r]s[l;r] be the substring of ss from the position ll to the position rr inclusive.Then in the first example you can remove the following substrings:   s[1;2]s[1;2];  s[1;3]s[1;3];  s[1;4]s[1;4];  s[2;2]s[2;2];  s[2;3]s[2;3];  s[2;4]s[2;4]. In the second example you can remove the following substrings:   s[1;4]s[1;4];  s[1;5]s[1;5];  s[1;6]s[1;6];  s[1;7]s[1;7];  s[2;7]s[2;7];  s[3;7]s[3;7]. In the third example you can remove the following substrings:   s[1;1]s[1;1];  s[1;2]s[1;2];  s[2;2]s[2;2]. 

Suppose we have a 2D grid A of infinite width and height of N units. Each row of the grid can be represented in the form of 111…100…∞ where the 1s are repeated x times, x>0. Implying that the row starts with x consecutive 1-s followed by all 0-s. 
Initially all cells are unmarked. Cell (i,j) refers to the i-th row, and j-th column. (1,1) refers to the bottom-left cell.
Now you do the following in each step.
Choose an unmarked cell having 1. Let it be (i, j).
while((i,j) lies in the grid boundaries && A[i][j] == 1){
    mark[i][j] = true; i--; j--;
}

How many minimum number of steps are required to mark all the cells containing 1?
Note: The number of consecutive 1-s at each height is given by the array W where Wi represents the same at ith row.
Input:

First line will contain T, number of testcases. Then the testcases follow. 
Each testcase contain 2 lines of input.
First line will contain N, height of the grid (number of rows). 
Second line contains N space separated integers where ith index represents number of consecutive 1-s at the beginning of row i.

Output:
For each testcase, output in a single line answer to the problem.
Constraints

1≤T≤10
1≤N≤105
1≤Wi≤109


                        Sample Input 1
                        





3
3
1 1 1
3
5 3 2
3
4 2 5



                        Sample Output 1
                        





3
7
8


Explanation
TestCase 1: All the points need to be considered to cover all 1-s.
TestCase 2: The optimal set of starting points is {(1,3),(2,3),(2,2),(3,2),(3,1),(4,1),(5,1)}.




Author:
daanish_adm


Editorial:
https://discuss.codechef.com/problems/PGRID1


Tags:

               
                 Observation
                 
                     
                     Algorithms
                 
               
             
             



                        Difficulty Rating:
                    

2204


Date Added:
29-12-2020


Time Limit:
1 secs


Source Limit:
50000 Bytes


Languages:
CPP17, PYTH 3.6, JAVA, C, CPP14, PYTH, PYP3, CS2, ADA, PYPY, TEXT, PAS fpc, NODEJS, RUBY, PHP, GO, HASK, TCL, kotlin, PERL, SCALA, LUA, BASH, JS, rust, LISP sbcl, PAS gpc, BF, CLOJ, R, D, CAML, swift, FORT, ASM, FS, WSPC, LISP clisp, SQL, SCM guile, PERL6, ERL, CLPS, PRLG, SQLQ, ICK, NICE, ICON, COB, SCM chicken, PIKE, SCM qobi, ST, NEM





Submit


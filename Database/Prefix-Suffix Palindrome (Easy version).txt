D1. Prefix-Suffix Palindrome (Easy version)time limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputThis is the easy version of the problem. The difference is the constraint on the sum of lengths of strings and the number of test cases. You can make hacks only if you solve all versions of this task.You are given a string ss, consisting of lowercase English letters. Find the longest string, tt, which satisfies the following conditions:   The length of tt does not exceed the length of ss.  tt is a palindrome.  There exists two strings aa and bb (possibly empty), such that t=a+bt=a+b ( "++" represents concatenation), and aa is prefix of ss while bb is suffix of ss. InputThe input consists of multiple test cases. The first line contains a single integer tt (1≤t≤10001≤t≤1000), the number of test cases. The next tt lines each describe a test case.Each test case is a non-empty string ss, consisting of lowercase English letters.It is guaranteed that the sum of lengths of strings over all test cases does not exceed 50005000.OutputFor each test case, print the longest string which satisfies the conditions described above. If there exists multiple possible solutions, print any of them.ExampleInputCopy5
a
abcdfdcecba
abbaxyzyx
codeforces
acbba
OutputCopya
abcdfdcba
xyzyx
c
abba
NoteIn the first test, the string s=s="a" satisfies all conditions.In the second test, the string "abcdfdcba" satisfies all conditions, because:  Its length is 99, which does not exceed the length of the string ss, which equals 1111.  It is a palindrome.  "abcdfdcba" == "abcdfdc" ++ "ba", and "abcdfdc" is a prefix of ss while "ba" is a suffix of ss. It can be proven that there does not exist a longer string which satisfies the conditions.In the fourth test, the string "c" is correct, because "c" == "c" ++ "" and aa or bb can be empty. The other possible solution for this test is "s".
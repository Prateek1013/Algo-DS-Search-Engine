B. Universal Solutiontime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputRecently, you found a bot to play "Rock paper scissors" with. Unfortunately, the bot uses quite a simple algorithm to play: he has a string s=s1s2…sns=s1s2…sn of length nn where each letter is either R, S or P.While initializing, the bot is choosing a starting index pospos (1≤pos≤n1≤pos≤n), and then it can play any number of rounds. In the first round, he chooses "Rock", "Scissors" or "Paper" based on the value of sposspos:   if sposspos is equal to R the bot chooses "Rock";  if sposspos is equal to S the bot chooses "Scissors";  if sposspos is equal to P the bot chooses "Paper"; In the second round, the bot's choice is based on the value of spos+1spos+1. In the third round — on spos+2spos+2 and so on. After snsn the bot returns to s1s1 and continues his game.You plan to play nn rounds and you've already figured out the string ss but still don't know what is the starting index pospos. But since the bot's tactic is so boring, you've decided to find nn choices to each round to maximize the average number of wins.In other words, let's suggest your choices are c1c2…cnc1c2…cn and if the bot starts from index pospos then you'll win in win(pos)win(pos) rounds. Find c1c2…cnc1c2…cn such that win(1)+win(2)+⋯+win(n)nwin(1)+win(2)+⋯+win(n)n is maximum possible.InputThe first line contains a single integer tt (1≤t≤10001≤t≤1000) — the number of test cases.Next tt lines contain test cases — one per line. The first and only line of each test case contains string s=s1s2…sns=s1s2…sn (1≤n≤2⋅1051≤n≤2⋅105; si∈{R,S,P}si∈{R,S,P}) — the string of the bot.It's guaranteed that the total length of all strings in one test doesn't exceed 2⋅1052⋅105.OutputFor each test case, print nn choices c1c2…cnc1c2…cn to maximize the average number of wins. Print them in the same manner as the string ss.If there are multiple optimal answers, print any of them.ExampleInputCopy3
RRRR
RSP
S
OutputCopyPPPP
RSP
RNoteIn the first test case, the bot (wherever it starts) will always choose "Rock", so we can always choose "Paper". So, in any case, we will win all n=4n=4 rounds, so the average is also equal to 44.In the second test case:   if bot will start from pos=1pos=1, then (s1,c1)(s1,c1) is draw, (s2,c2)(s2,c2) is draw and (s3,c3)(s3,c3) is draw, so win(1)=0win(1)=0;  if bot will start from pos=2pos=2, then (s2,c1)(s2,c1) is win, (s3,c2)(s3,c2) is win and (s1,c3)(s1,c3) is win, so win(2)=3win(2)=3;  if bot will start from pos=3pos=3, then (s3,c1)(s3,c1) is lose, (s1,c2)(s1,c2) is lose and (s2,c3)(s2,c3) is lose, so win(3)=0win(3)=0;  The average is equal to 0+3+03=10+3+03=1 and it can be proven that it's the maximum possible average.A picture from Wikipedia explaining "Rock paper scissors" game:   
D. Add to Neighbour and Removetime limit per test3 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputPolycarp was given an array of a[1…n]a[1…n] of nn integers. He can perform the following operation with the array aa no more than nn times:  Polycarp selects the index ii and adds the value aiai to one of his choice of its neighbors. More formally, Polycarp adds the value of aiai to ai−1ai−1 or to ai+1ai+1 (if such a neighbor does not exist, then it is impossible to add to it).  After adding it, Polycarp removes the ii-th element from the aa array. During this step the length of aa is decreased by 11. The two items above together denote one single operation.For example, if Polycarp has an array a=[3,1,6,6,2]a=[3,1,6,6,2], then it can perform the following sequence of operations with it:   Polycarp selects i=2i=2 and adds the value aiai to (i−1)(i−1)-th element: a=[4,6,6,2]a=[4,6,6,2].  Polycarp selects i=1i=1 and adds the value aiai to (i+1)(i+1)-th element: a=[10,6,2]a=[10,6,2].  Polycarp selects i=3i=3 and adds the value aiai to (i−1)(i−1)-th element: a=[10,8]a=[10,8].  Polycarp selects i=2i=2 and adds the value aiai to (i−1)(i−1)-th element: a=[18]a=[18]. Note that Polycarp could stop performing operations at any time.Polycarp wondered how many minimum operations he would need to perform to make all the elements of aa equal (i.e., he wants all aiai are equal to each other).InputThe first line contains a single integer tt (1≤t≤30001≤t≤3000) — the number of test cases in the test. Then tt test cases follow.The first line of each test case contains a single integer nn (1≤n≤30001≤n≤3000) — the length of the array. The next line contains nn integers a1,a2,…,ana1,a2,…,an (1≤ai≤1051≤ai≤105) — array aa.It is guaranteed that the sum of nn over all test cases does not exceed 30003000.OutputFor each test case, output a single number — the minimum number of operations that Polycarp needs to perform so that all elements of the aa array are the same (equal).ExampleInputCopy4
5
3 1 6 6 2
4
1 2 2 1
3
2 2 2
4
6 3 2 1
OutputCopy4
2
0
2
NoteIn the first test case of the example, the answer can be constructed like this (just one way among many other ways):[3,1,6,6,2][3,1,6,6,2] −→−−−−−−−i=4, add to left→i=4, add to left [3,1,12,2][3,1,12,2] −→−−−−−−−−i=2, add to right→i=2, add to right [3,13,2][3,13,2] −→−−−−−−−−i=1, add to right→i=1, add to right [16,2][16,2] −→−−−−−−−i=2, add to left→i=2, add to left [18][18]. All elements of the array [18][18] are the same.In the second test case of the example, the answer can be constructed like this (just one way among other ways):[1,2,2,1][1,2,2,1] −→−−−−−−−−i=1, add to right→i=1, add to right [3,2,1][3,2,1] −→−−−−−−−i=3, add to left→i=3, add to left [3,3][3,3]. All elements of the array [3,3][3,3] are the same.In the third test case of the example, Polycarp doesn't need to perform any operations since [2,2,2][2,2,2] contains equal (same) elements only.In the fourth test case of the example, the answer can be constructed like this (just one way among other ways):[6,3,2,1][6,3,2,1] −→−−−−−−−−i=3, add to right→i=3, add to right [6,3,3][6,3,3] −→−−−−−−−i=3, add to left→i=3, add to left [6,6][6,6]. All elements of the array [6,6][6,6] are the same.
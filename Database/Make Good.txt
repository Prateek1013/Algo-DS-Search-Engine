C. Make Goodtime limit per test2 secondsmemory limit per test256 megabytesinputstandard inputoutputstandard outputLet's call an array a1,a2,…,ama1,a2,…,am of nonnegative integer numbers good if a1+a2+⋯+am=2⋅(a1⊕a2⊕⋯⊕am)a1+a2+⋯+am=2⋅(a1⊕a2⊕⋯⊕am), where ⊕⊕ denotes the bitwise XOR operation.For example, array [1,2,3,6][1,2,3,6] is good, as 1+2+3+6=12=2⋅6=2⋅(1⊕2⊕3⊕6)1+2+3+6=12=2⋅6=2⋅(1⊕2⊕3⊕6). At the same time, array [1,2,1,3][1,2,1,3] isn't good, as 1+2+1+3=7≠2⋅1=2⋅(1⊕2⊕1⊕3)1+2+1+3=7≠2⋅1=2⋅(1⊕2⊕1⊕3).You are given an array of length nn: a1,a2,…,ana1,a2,…,an. Append at most 33 elements to it to make it good. Appended elements don't have to be different. It can be shown that the solution always exists under the given constraints. If there are different solutions, you are allowed to output any of them. Note that you don't have to minimize the number of added elements!. So, if an array is good already you are allowed to not append elements.InputEach test contains multiple test cases. The first line contains the number of test cases tt (1≤t≤100001≤t≤10000). The description of the test cases follows.The first line of each test case contains a single integer nn (1≤n≤105)(1≤n≤105) — the size of the array.The second line of each test case contains nn integers a1,a2,…,ana1,a2,…,an (0≤ai≤1090≤ai≤109) — the elements of the array.It is guaranteed that the sum of nn over all test cases does not exceed 105105.OutputFor each test case, output two lines.In the first line, output a single integer ss (0≤s≤30≤s≤3) — the number of elements you want to append.In the second line, output ss integers b1,…,bsb1,…,bs (0≤bi≤10180≤bi≤1018) — the elements you want to append to the array.If there are different solutions, you are allowed to output any of them.ExampleInputCopy3
4
1 2 3 6
1
8
2
1 1
OutputCopy0

2
4 4
3
2 6 2
NoteIn the first test case of the example, the sum of all numbers is 1212, and their ⊕⊕ is 66, so the condition is already satisfied.In the second test case of the example, after adding 4,44,4, the array becomes [8,4,4][8,4,4]. The sum of numbers in it is 1616, ⊕⊕ of numbers in it is 88.